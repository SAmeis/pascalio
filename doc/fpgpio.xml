<?xml version="1.0" encoding="utf-8"?>
<fpdoc-descriptions>
  <package name="rpiio">
    <module name="fpgpio">
      <element name="TGpioPin.PollChange">
        <short>Polls GPIO pin for change</short>
      </element>
      <element name="TGpioPin">
        <short>Abstract GPIO class</short>
      </element>
      <element name="TGpioPin.PollChange.delay">
        <short>Delay between polls in milliseconds</short>
        <descr>If <var>delay</var> is negative (-1 or less), the next poll will be done imediatly.
If <var>delay</var> is exactly 0, <code>sleep(0)</code> will be called. Thus the remaining time slice will be returned to the OS' scheduler and your application/thread will sleep until it gets a new time slice.
If <var>delay</var> is greater than 0, <code>sleep(delay)</code> will be called. Your application/thread will be paused for at least this amount of time (but maybe a little longer).</descr>
      </element>
      <element name="TGpioPin.PollChange.timeout">
        <short>Maximum time for polling in milliseconds</short>
        <descr>Method will return, when <var>timeout</var> milliseconds have passed without changing <link id="TGpioPin.Value"/>.</descr>
      </element>
      <element name="TGpioPin.Value">
        <short>Value of GPIO pin</short>
      </element>
      <element name="TGpioPin.PollChange.changed">
        <short>New value</short>
      </element>
      <element name="TGpioPin.PollChange.value">
        <short>New Value</short>
        <descr>Contains the new value if not timed out.</descr>
      </element>
      <element name="TGpioPin.PollChange.Result">
        <short>Indicates timeout or change</short>
        <descr>
          <var>True</var> indicates a change in 
          <link id="TGpioPin.Value"/>; the value is stored in 
          <link id="TGpioPin.PollChange.value"/>.


          <var>False</var> indicates a timeout.</descr>
      </element>
      <element name="TGpioGroup">
        <short>Group of joint GPIO pins</short>
        <descr>Some GPIO expanders allow the manipulation of a group of pins only. Only the group may be configured as output or input---not each pin individually.</descr>
      </element>
      <element name="TGpioPin.WaitForInterruptIndirect.timeout">
        <short>Timeout in milliseconds</short>
      </element>
      <element name="TGpioPin.WaitForInterrupt.timeout">
        <short>Timeout in milliseconds</short>
      </element>
      <short>General Purpose Input/Output access classes for Free Pascal</short>
      <element name="TGpioDirection.gdOut">
        <short>GPIO in output mode</short>
        <seealso>
          <link id="TGpioDirection.gdIn"/>
          <link id="TGpioPin.Direction"/>
        </seealso>
      </element>
      <element name="TGpioDirection.gdIn">
        <short>GPIO in input mode</short>
        <seealso>
          <link id="TGpioDirection.gdOut"/>
          <link id="TGpioPin.Direction"/>
        </seealso>
      </element>
      <element name="TGpioDirection">
        <short>Direction of GPIO Pins</short>
        <seealso>
          <link id="TGpioPin.Direction"/>
        </seealso>
      </element>
      <element name="TGpioPin.Direction">
        <short>Configure pin as Input or as Output</short>
      </element>
      <element name="TGpioInterruptModes"/>
      <element name="TGpioInterruptMode"/>
      <element name="gimBoth">
        <short>Interrupt on rising edge and on falling edge</short>
      </element>
      <element name="gimNone">
        <short>No interrupt</short>
      </element>
      <element name="TGpioPin.WaitForInterrupt">
        <short>Waits for interrupt</short>
        <errors>If (direct) interrupts are not supported (e.g. I/O expanders), an <link id="EDirectInterruptError"/> exception is raised.</errors>
        <seealso>
          <link id="TGpioPin.InterruptMode"/>
        </seealso>
      </element>
      <element name="EDirectInterruptError">
        <short>Interrupt not supported</short>
      </element>
      <element name="EIndirectInterruptError">
        <short>Indirect Interrupt not supported</short>
      </element>
      <element name="TGpioPin.WaitForInterruptIndirect">
        <short>Waits for indirect interrupt</short>
        <descr>A change on a pin of an I/O expander can't be detected by the host. So most (or at least some of them) can be configured to indicate a change on a outgoing interrupt pin. The provided TGpioPin object has to be fully configured.</descr>
      </element>
      <element name="TGpioPin.WaitForInterruptIndirect.aInterruptPin"/>
      <element name="TGpioPin.AcitveHigh"/>
      <element name="TGpioInterruptModes.gimRising">
        <short>Interrupt on rising edge</short>
      </element>
      <element name="TGpioInterruptModes.gimFalling">
        <short>Interrupt on falling edge</short>
      </element>
      <element name="EInterruptError">
        <short>Generic exception for interrupt errors</short>
      </element>
      <element name="TGpioPin.InterruptMode">
        <short>Interrupt mode</short>
      </element>
      <element name="TGpioController">
        <short>Generic class for a goup of GPIO pins controlled together</short>
      </element>
      <element name="TPinPosition">
        <short>All possible positions of a Pin in a Register</short>
        <seealso>
          <link id="TRegisterValue"/>
        </seealso>
      </element>
      <element name="TRegisterValue">
        <short>Value of a 8 bit register</short>
        <seealso>
          <link id="TPinPosition"/>
        </seealso>
      </element>
      <element name="TRegisterType">
        <short>All register types a I/O expander might support</short>
        <seealso>
          <link id="TGpioRegisterController.GetRegister"/>
        </seealso>
        <descr>This enumeration contains all possible types of registers an I/O expander might have. These types are named by usage. Thus a microcontroller may have seperate registers for setting and reading a GPIO pins value.

A register type is converted to an address which an I/O expander can understand within <link id="TGpioRegisterController.GetRegister"/>.</descr>
      </element>
      <element name="TGpioRegisterController">
        <short>Generic class for I/O controller using registers</short>
        <descr>Many external I/O expanders provide an interace which exposes the internal registers to the contoller. This base class provides an basic interface to these expanders.

Setting and getting values basically operate on 3 methods:
<ol>
            <li>
              <link id="TGpioRegisterController.GetRegister">function GetRegister():</link> Getting the 
              
              <link id="TRegisterAddress">adress of the register</link> and the 
              
              <link id="TPinPosition">position of the pin within this register</link>.</li>
            <li>
              <link id="TGpioRegisterController.GetRegisterValue">function GetRegisterValue():</link> Reading the current 
              
              <link id="TRegisterValue"/>.</li>
            <li>
              <link id="TGpioRegisterController.SetRegisterValue">procedure SetRegisterValue():</link> Setting the new value if desired.</li>
            <li>If you are interested in only one bit of a register, you may use the convenience methods <link id="TGpioRegisterController.GetRegisterValueS"/> and <link id="TGpioRegisterController.SetRegisterValueS"/>.</li>
          </ol><p>
            <b>Only expanders with 8 bit registers are supported.</b> This does not mean, the expander may have at maximum 8 GPIO channels. An expander may provide more than one register for one task.</p>
        </descr>
      </element>
      <element name="TGpioRegisterController.GetRegister">
        <short>Address of a requested register</short>
        <descr>Has to be implemented!</descr>
      </element>
      <element name="TGpioRegisterController.GetRegisterValue">
        <descr>Has to be implemented!</descr>
        <short>Retrieves the value of a given register</short>
      </element>
      <element name="TGpioRegisterController.SetRegisterValue">
        <short>Set the value of a given register</short>
        <descr>Has to be implemented!</descr>
      </element>
      <element name="TGpioRegisterController.RegisterValue">
        <short>Value of a given register</short>
      </element>
      <element name="TGpioController.Pins">
        <short>All pins in this controller</short>
        <seealso>
          <link id="TGpioControlledPin"/>
        </seealso>
        <descr>The controller holds all pins which it controls. The pins are of the class <link id="TGpioControlledPin"/>, which is a special implementation for this controller class (but who cares---it has no special abilities).</descr>
      </element>
      <element name="TGpioController.Count">
        <short>Count of pins</short>
      </element>
      <element name="TGpioController.ActiveLow">
        <short>Inverted logic</short>
      </element>
      <element name="TGpioController.Value">
        <short>Value of pin</short>
      </element>
      <element name="TGpioController.Direction">
        <short>Direction of pin</short>
      </element>
      <element name="TGpioController.Create">
        <short>Creates required Pin instances</short>
        <descr>Has to be overridden!</descr>
      </element>
      <element name="TGpioControlledPin">
        <short>GPIO pin class for TGPIOController</short>
        <descr>This class is an implementation for <link id="TGpioController"/>. All actions are forwarded to the controller.</descr>
        <seealso>
          <link id="TGpioController"/>
        </seealso>
      </element>
      <element name="TRegisterType.rtGetValue">
        <short>Register for getting the values</short>
      </element>
      <element name="TGpioRegisterController.GetRegisterValueS">
        <short>Convenience method for getting a value for a specific pin</short>
        <seealso>
          <link id="TGpioRegisterController.SetRegisterValueS"/>
          <link id="TGpioRegisterController.GetRegister"/>
          <link id="TGpioRegisterController.GetRegisterValue"/>
        </seealso>
      </element>
      <element name="TGpioRegisterController.SetRegisterValueS">
        <short>Convenience method for setting a value for a specific pin</short>
        <seealso>
          <link id="TGpioRegisterController.GetRegisterValueS"/>
          <link id="TGpioRegisterController.GetRegister"/>
          <link id="TGpioRegisterController.GetRegisterValue"/>
          <link id="TGpioRegisterController.SetRegisterValue"/>
        </seealso>
      </element>
      <element name="TRegisterAddress">
        <short>Register address in expander</short>
      </element>
      <element name="TGpioLinuxPin">
        <short>Implementation using the Linux Kernel Driver</short>
        <descr>The Linux Kernel exposes GPIO pins to user mode applications through the filesystem interface located at /sys/class/gpio/. This is used by this class.

This class should be threadsafe (not tested!). You should be able to read values in one thread while another thread is waiting for an interrupt.</descr>
      </element>
      <element name="TGpioLinuxPin.Create">
        <short>Creates a new instance</short>
      </element>
      <element name="TGpioLinuxPin.Create.aID">
        <short>GPIO pin ID</short>
        <descr>This the internal Pin ID of the microcontroller running Linux. Typically it is <b>not </b>any Pin number printed on the board.

Regarding the Raspberry Pi, this is the BCM pin number, not the one of the connectors.</descr>
      </element>
      <element name="GPIO_LINUX_BASE_DIR">
        <short>Base directory for Linux Kernel GPIO interface</short>
      </element>
      <element name="GPIO_LINUX_GPIOPIN_DIR">
        <short>Base directory for Linux Kernel GPIO interface for specific Pin</short>
      </element>
      <element name="TGpioControlledPin.Create">
        <short>Creates new controlled GPIO pin</short>
        <descr>This constructor should be called by <link id="TGpioController.Create"/> only.</descr>
      </element>
      <element name="TGpioControlledPin.Create.aController">
        <short>Responsible Controller for this pin</short>
      </element>
      <element name="TGpioControlledPin.Create.aIndex">
        <short>Internal index of this pin</short>
      </element>
      <element name="TGpioLinuxPin.PinID">
        <short>The GPIO's ID in the Linux Kernel driver</short>
        <seealso>
          <link id="TGpioLinuxPin.Create.aID"/>
        </seealso>
      </element>
    </module>
  </package>
</fpdoc-descriptions>
